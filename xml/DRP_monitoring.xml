<?xml version="1.0" encoding="UTF-8"?>
<pipeline
   xmlns="http://glast-ground.slac.stanford.edu/pipeline"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://glast-ground.slac.stanford.edu/pipeline https://glast-ground.slac.stanford.edu/Pipeline-II/schemas/2.2/pipeline.xsd">
<!-- $Header$
-->
<task name="DRP_monitoring" version="10.4" type="Data">
  <variables>
    <!-- Default values that can be overridden at the command line. -->

    <!-- variables for running at S3DF with containers -->
    <var name="preamble"></var>  <!-- pre-amble for job executables -->
    <var name="container_image">/sdf/group/fermi/sw/containers/fermi-rhel6.sif</var>
    <var name="container_volumes">--bind /sdf:/sdf,/sdf/group/fermi/sw/package:/afs/slac.stanford.edu/package</var>
    <var name="container_wrap">singularity exec ${container_volumes} ${container_image}</var>
    <var name="extra"></var>  <!--extra batch options-->
    <var name="jobsite">S3DFDATA</var>
    <var name="GPL_XROOTD_DIR">/sdf/data/fermi/a/applications/xrootd/dist/v3.1.1/i386_rhel60/bin</var>
    <var name="SCRIPT_DIR">/sdf/data/fermi/a/ground/ASP/prod/ASP_at_S3DF/pipeline_scripts</var>

    <!-- original pipeline variables, modified for S3DF -->
    <var name="BINDIR">bin/redhat6-x86_64-64bit-gcc44-Optimized</var>
    <var name="datacatalog_imp">datacatalog</var>
    <var name="pgwave_folder">/ASP/Results/pgwave</var>
    <var name="outputFolder">/ASP/Results/DRP</var>
    <var name="xrootd_folder">/ASP/DRP</var>
    <var name="GALPROP_MODEL">/sdf/data/fermi/a/ground/GLAST_EXT/diffuseModels/v5r0/gll_iem_v06.fits</var>
    <var name="logRoot">/sdf/group/fermi/ground/PipelineOutput/ASP/log_files</var>
  </variables>
  <prerequisites>
    <prerequisite name="OUTPUTDIR" type="string"/>
    <prerequisite name="folder" type="string"/>
    <prerequisite name="interval" type="integer"/>
    <prerequisite name="frequency" type="string"/>
    <prerequisite name="TSTART" type="string"/>
    <prerequisite name="TSTOP" type="string"/>
    <prerequisite name="pgwave_streamId" type="integer"/>
    <prerequisite name="ASP_PATH" type="string"/>
    <prerequisite name="DRPMONITORINGROOT" type="string"/>
  </prerequisites>

  <process name="catalogQuery" site="${jobsite}">
    <job executable="bash ${SCRIPT_DIR}/drp_datacat_query.sh" batchOptions="${extra}" />
  </process>

  <process name="getIntervalData" autoRetryMaxAttempts="2" site="${jobsite}">
    <job executable="${preamble} ${container_wrap} ${DRPMONITORINGROOT}/${BINDIR}/getIntervalData.sh"
         batchOptions="${extra}"/>
    <depends>
      <after process="catalogQuery" status="SUCCESS"/>
    </depends>
  </process>

  <process name="diffuseResponses" autoRetryMaxAttempts="2" site="${jobsite}">
    <job executable="${preamble} ${container_wrap} ${DRPMONITORINGROOT}/${BINDIR}/diffuseResponses.sh"
         batchOptions="${extra}"/>
    <depends>
      <after process="getIntervalData" status="SUCCESS"/>
    </depends>
  </process>

  <process name="sourceSelection" autoRetryMaxAttempts="2" site="${jobsite}">
    <job executable="${preamble} ${container_wrap} ${DRPMONITORINGROOT}/${BINDIR}/sourceSelection.sh"
         batchOptions="${extra}"/>
    <depends>
      <after process="getIntervalData" status="SUCCESS"/>
    </depends>
  </process>

  <process name="assignRois" autoRetryMaxAttempts="2" site="${jobsite}">
    <job executable="${preamble} ${container_wrap} ${DRPMONITORINGROOT}/${BINDIR}/assignRois.sh"
         batchOptions="${extra}"/>
    <depends>
      <after process="sourceSelection" status="SUCCESS"/>
    </depends>
  </process>

  <process name="launchRoiAnalyses" autoRetryMaxAttempts="2" site="${jobsite}">
    <script language="python">
      <![CDATA[
        assignRois = pipeline.getProcessInstance("assignRois")
        roi_ids = ("%s" % assignRois.getVariable("ROI_IDS")).split()
        roi_ids = [int(x) for x in roi_ids]
        print "number of ROIs", len(roi_ids)
        for id in roi_ids:
            pipeline.createSubstream("roiAnalysis", id)
      ]]>
    </script>
    <depends>
      <after process="diffuseResponses" status="SUCCESS"/>
      <after process="assignRois" status="SUCCESS"/>
    </depends>
    <createsSubtasks>
      <subtask>roiAnalysis</subtask>
    </createsSubtasks>
  </process>

  <process name="createArchive" autoRetryMaxAttempts="1" site="${jobsite}">
    <job executable="${preamble} ${container_wrap} ${DRPMONITORINGROOT}/${BINDIR}/drp_createTarBall.sh"
         batchOptions="${extra}"/>
    <depends>
      <after process="roiAnalysis.dummyProcess" status="SUCCESS"/>
    </depends>
  </process>

  <process name="registerArchive" site="${jobsite}">
    <script language="python">
      <![CDATA[
        createArchive = pipeline.getProcessInstance("createArchive")
        dataType = "DRP_ARCHIVE"

        filePath = createArchive.getVariable("tarball_name")

        attributes = ('nMetStart=%s:nMetStop=%s:sFrequency=%s:nInterval=%i' %
                      (TSTART, TSTOP, frequency, interval))
        print attributes

        outfile = filePath.split('/')[-1]
        logical_path = '%s/%s:%s' % (outputFolder, dataType, outfile)
        print logical_path

        if filePath.find('root') == 0:
            filePath += "@SLAC_XROOT"
        print filePath

        datacatalog.registerDataset(dataType, logical_path, filePath,
                                    attributes)
      ]]>
    </script>
    <depends>
      <after process="createArchive" status="SUCCESS"/>
    </depends>
  </process>

  <process name="clean_up_files" autoRetryMaxAttempts="1" site="${jobsite}">
    <job executable="${preamble} ${container_wrap} ${DRPMONITORINGROOT}/${BINDIR}/drp_clean_up_files.sh"
         batchOptions="${extra}"/>
    <depends>
      <after process="registerArchive" status="SUCCESS"/>
    </depends>
  </process>

  <task name="roiAnalysis" version="1.0" type="Data">
    <process name="getRoiData" autoRetryMaxAttempts="2" site="${jobsite}">
      <variables>
        <var name="ROI_ID">${pipeline.stream}</var>
      </variables>
      <job executable="${preamble} ${container_wrap} ${DRPMONITORINGROOT}/${BINDIR}/getRoiData.sh"
           batchOptions="${extra}"/>
    </process>

    <process name="exposureMap" autoRetryMaxAttempts="1" site="${jobsite}">
      <variables>
        <var name="ROI_ID">${pipeline.stream}</var>
      </variables>
      <script language="python">
        <![CDATA[
          args = "ROI_ID=%i" % pipeline.stream
          #submaps = 4
          submaps = 1
          for i in range(submaps):
              pipeline.createSubstream("exposureSubMap", i+1, args)
        ]]>
      </script>
      <depends>
        <after process="getRoiData" status="SUCCESS"/>
      </depends>
      <createsSubtasks>
        <subtask>exposureSubMap</subtask>
      </createsSubtasks>
    </process>

    <process name="combineExpMaps" autoRetryMaxAttempts="2" site="${jobsite}">
      <variables>
        <var name="ROI_ID">${pipeline.stream}</var>
      </variables>
      <job executable="${preamble} ${container_wrap} ${DRPMONITORINGROOT}/${BINDIR}/combineDrpExpMaps.sh"
           batchOptions="${extra}"/>
      <depends>
        <after process="exposureSubMap.drpExpMap" status="SUCCESS"/>
      </depends>
    </process>

    <process name="sourceAnalysis" autoRetryMaxAttempts="2" site="${jobsite}">
      <variables>
        <var name="ROI_ID">${pipeline.stream}</var>
      </variables>
      <job executable="${preamble} ${container_wrap} ${DRPMONITORINGROOT}/${BINDIR}/sourceAnalysis.sh"
           batchOptions="${extra}"/>
      <depends>
        <after process="combineExpMaps" status="SUCCESS"/>
      </depends>
    </process>

    <process name="launchEnergyBandAnalyses" site="${jobsite}">
      <script language="python">
        <![CDATA[
          parent_process = pipeline.getProcessInstance("sourceAnalysis")
          ids = parent_process.getVariable('EBAND_IDS').split()
          emins = parent_process.getVariable('MINIMUM_ENERGIES').split()
          emaxs = parent_process.getVariable('MAXIMUM_ENERGIES').split()
          for i, id, emin, emax in zip(range(len(emins)), ids, emins, emaxs):
              args = "eband_id=%s,emin=%s,emax=%s,ROI_ID=%i" % (id, emin, emax,
                                                                pipeline.stream)
              pipeline.createSubstream("energyBandAnalysis", i, args)
        ]]>
      </script>
      <depends>
        <after process="sourceAnalysis" status="SUCCESS"/>
      </depends>
      <createsSubtasks>
        <subtask>energyBandAnalysis</subtask>
      </createsSubtasks>
    </process>

    <process name="dummyProcess" autoRetryMaxAttempts="1" site="${jobsite}">
      <script language="python">
        <![CDATA[
           print "energyBandAnalysis.fitEnergyBand processes finished"
        ]]>
      </script>
      <depends>
        <after process="energyBandAnalysis.fitEnergyBand" status="SUCCESS"/>
      </depends>
    </process>

    <task name="exposureSubMap" version="1.0" type="Data">
      <prerequisites>
        <prerequisite name="ROI_ID" type="string"/>
      </prerequisites>
      <process name="drpExpMap" autoRetryMaxAttempts="1" site="${jobsite}">
        <variables>
          <var name="EXPMAP_ID">${pipeline.stream}</var>
        </variables>
        <job executable="${preamble} ${container_wrap} ${DRPMONITORINGROOT}/${BINDIR}/drpExpMap.sh"
             batchOptions="${extra}"/>
      </process>
    </task> <!--exposureSubMap-->

    <task name="energyBandAnalysis" version="1.0" type="Data">
      <prerequisites>
        <prerequisite name="eband_id" type="integer"/>
        <prerequisite name="emin" type="integer"/>
        <prerequisite name="emax" type="integer"/>
        <prerequisite name="ROI_ID" type="string"/>
      </prerequisites>
      <process name="fitEnergyBand" autoRetryMaxAttempts="2" site="${jobsite}">
        <job executable="${preamble} ${container_wrap} ${DRPMONITORINGROOT}/${BINDIR}/fitEnergyBand.sh"
             batchOptions="${extra}"/>
      </process>
    </task> <!--energyBandAnalysis-->

  </task> <!--roiAnalysis-->

</task> <!--DRP_monitoring-->

</pipeline>
